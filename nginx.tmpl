{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $external_http_port := coalesce $.Env.HTTP_PORT "80" }}
{{ $external_https_port := coalesce $.Env.HTTPS_PORT "443" }}
{{ $debug_all := $.Env.DEBUG }}
{{ $sha1_upstream_name := parseBool (coalesce $.Env.SHA1_UPSTREAM_NAME "false") }}

{{ define "ssl_policy" }}
	{{ if eq .ssl_policy "Mozilla-Modern" }}
		ssl_protocols TLSv1.3;
		{{/* nginx currently lacks ability to choose ciphers in TLS 1.3 in configuration, see https://trac.nginx.org/nginx/ticket/1529 /*}}
		{{/* a possible workaround can be modify /etc/ssl/openssl.cnf to change it globally (see https://trac.nginx.org/nginx/ticket/1529#comment:12 ) /*}}
		{{/* explicitly set ngnix default value in order to allow single servers to override the global http value */}}
		ssl_ciphers HIGH:!aNULL:!MD5;
		ssl_prefer_server_ciphers off;
	{{ else if eq .ssl_policy "Mozilla-Intermediate" }}
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
		ssl_prefer_server_ciphers off;
	{{ else if eq .ssl_policy "Mozilla-Old" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-TLS-1-2-2017-01" }}
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-TLS-1-1-2017-01" }}
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2016-08" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-05" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-03" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-02" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA';
		ssl_prefer_server_ciphers on;
	{{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Apply fix for very long server names
server_names_hash_bucket_size 128;

# Default dhparam
{{ if (exists "/etc/nginx/dhparam/dhparam.pem") }}
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{ end }}

# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
  default off;
  https on;
}

gzip on; 
gzip_vary on; 
gzip_min_length 1024; 
gzip_proxied expired no-cache no-store private auth; 
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
gzip_disable "MSIE [1-6]\.";

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent" '
                 '"$upstream_addr"' '"$proxy_host"' ;

access_log on;

{{/* Get the SSL_POLICY defined by this container, falling back to "Mozilla-Intermediate" */}}
{{ $ssl_policy := or ($.Env.SSL_POLICY) "Mozilla-Intermediate" }}
{{ template "ssl_policy" (dict "ssl_policy" $ssl_policy) }}

{{ if $.Env.RESOLVERS }}
resolver {{ $.Env.RESOLVERS }};
{{ end }}

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{ end }}

{{ $access_log := (or (and (not $.Env.DISABLE_ACCESS_LOGS) "access_log /var/log/nginx/access.log vhost;") "") }}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when (or $is_regexp $sha1_upstream_name) (sha1 $host) $host }}

# {{ $host }}
upstream {{ $upstream_name }} {

{{ $server_found := "false" }}
{{ range $container := $containers }}
	{{ $debug := (eq (coalesce $container.Env.DEBUG $debug_all "false") "true") }}
	{{/* If only 1 port exposed, use that as a default, else 80 */}}
	{{ $defaultPort := (when (eq (len $container.Addresses) 1) (first $container.Addresses) (dict "Port" "80")).Port }}
	{{ $port := (coalesce $container.Env.VIRTUAL_PORT $defaultPort) }}
	{{ $address := where $container.Addresses "Port" $port | first }}
	#{{ $backend := (coalesce $container.Env.VIRTUAL_BACKEND "") }}
	{{ if $debug }}
	# Exposed ports: {{ $container.Addresses }}
	# Default virtual port: {{ $defaultPort }}
	# VIRTUAL_PORT: {{ $container.Env.VIRTUAL_PORT }}
		{{ if not $address }}
	# /!\ Virtual port not exposed
		{{ end }}
	{{ end }}
	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
	## Can be connected with "{{ $containerNetwork.Name }}" network
				{{ if $address }}
					{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
					{{ if and $container.Node.ID $address.HostPort }}
						{{ $server_found = "true" }}
	# {{ $container.Node.Name }}/{{ $container.Name }}
	server {{ $container.Node.Address.IP }}:{{ $address.HostPort }};
					{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
					{{ else if $containerNetwork }}
						{{ $server_found = "true" }}
	# {{ $container.Name }}
	server {{ $containerNetwork.IP }}:{{ $address.Port }};
					{{ end }}
				{{ else if $containerNetwork }}
	# {{ $container.Name }}
					{{ if $containerNetwork.IP }}
						{{ $server_found = "true" }}
	server {{ $containerNetwork.IP }}:{{ $port }};
					{{ else }}
	# /!\ No IP for this network!
					{{ end }}
				{{ end }}
			{{ else }}
	# Cannot connect to network '{{ $containerNetwork.Name }}' of this container
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
{{/* nginx-proxy/nginx-proxy#1105 */}}
{{ if (eq $server_found "false") }}
	# Fallback entry
	server 127.0.0.1 down;
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := trim (or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http") }}
{{ $oneDomain := dict}}
{{$_ := set $oneDomain "ca" "true"}}
{{$_ := set $oneDomain "com" "true"}}
{{$_ := set $oneDomain "ie" "true"}}
{{$_ := set $oneDomain "cy" "true"}}
{{$_ := set $oneDomain "nz" "true"}}
{{$_ := set $oneDomain "gr" "false"}}
{{$_ := set $oneDomain "br" "false"}}
{{$_ := set $oneDomain "cl" "false"}}
{{$_ := set $oneDomain "mx" "false"}}
{{$_ := set $oneDomain "ec" "false"}}
{{$_ := set $oneDomain "fi" "false"}}

{{ $domains := dict }}
{{ $_ := set $domains "prd" "" }}
{{ $_ := set $domains "stg" "stg." }}
{{ $_ := set $domains "devgr" "devgr." }}

{{ $domainTemplates := dict }}
{{$_ := set $domainTemplates "ca" "%sca.novibet.com"}}
{{$_ := set $domainTemplates "com" "www.%snovibet.com"}}
{{$_ := set $domainTemplates "ie" "www.%snovibet.ie"}}
{{$_ := set $domainTemplates "cy" "www.%snovibet.com.cy"}}
{{$_ := set $domainTemplates "nz" "%snz.novibet.com"}}
{{$_ := set $domainTemplates "gr" "www.%snovibet.gr"}}
{{$_ := set $domainTemplates "br" "www.%sbr.novibet.com"}}
{{$_ := set $domainTemplates "cl" "www.%scl.novibet.com"}}
{{$_ := set $domainTemplates "mx" "www.%snovibet.mx"}}
{{$_ := set $domainTemplates "ec" "www.%sec.novibet.com"}}
{{$_ := set $domainTemplates "fi" "www.%snovibet.fi"}}


{{ $countryIps := dict }}
{{$_ := set $countryIps "ca" "77.243.64.10"}}
{{$_ := set $countryIps "com" "104.243.247.5"}}
{{$_ := set $countryIps "ie" "109.79.255.4"}}
{{$_ := set $countryIps "cy" "103.35.178.5"}}
{{$_ := set $countryIps "nz" "103.100.86.0"}}
{{$_ := set $countryIps "gr" "212.205.6.118"}}
{{$_ := set $countryIps "br" "101.46.160.5"}}
{{$_ := set $countryIps "cl" "166.75.0.0"}}
{{$_ := set $countryIps "mx" "104.238.40.5"}}
{{$_ := set $countryIps "ec" "157.100.255.5"}}
{{$_ := set $countryIps "fi" "109.163.208.0"}}


{{ $environment := trim (or (first (groupByKeys $containers "Env.VIRTUAL_ENVIRONMENT")) "prd") }}
{{ $domain := trim (or (first (groupByKeys $containers "Env.VIRTUAL_DOMAIN")) "gr") }}

{{ $domainKey := index $domains $environment }}
{{ $hasProxy := trim (or (first (groupByKeys $containers "Env.HAS_PROXY")) "true")}}
{{ $forwarded_host := trim (or (first (groupByKeys $containers "Env.VIRTUAL_FORWARDED_HOST")) "novi-gr.dev-app-01.local") }}
{{ $forwarded_for := index $countryIps $domain}}
{{ $domainTemplate := index $domainTemplates $domain}}

{{ $legacy_desktop := trim (or (first (groupByKeys $containers "Env.VIRTUAL_LEGACY_DESKTOP"))  ( printf "web-novibet-desktop-api-%s.%s-novibet.systems" $domain $environment)) }}
{{ $legacy_mobile := trim (or (first (groupByKeys $containers "Env.VIRTUAL_LEGACY_MOBILE"))  ( printf "web-novibet-mobile-api-%s.%s-novibet.systems" $domain $environment)) }}
{{ $backend := trim (or (first (groupByKeys $containers "Env.VIRTUAL_BACKEND"))  ( printf "web-novibet-desktop-api-%s.%s-novibet.systems" $domain $environment)) }}
{{ $mrk_gateway := trim (or (first (groupByKeys $containers "Env.VIRTUAL_MRK_GATEWAY")) ( printf "web-marketinggateway.%s-novibet.systems" $environment)) }}
{{ $spt_gateway := trim (or (first (groupByKeys $containers "Env.VIRTUAL_SPT_GATEWAY")) ( printf "web-sportsbookfeed.%s-novibet.systems" $environment)) }}
{{ $spt_api :=trim (or (first (groupByKeys $containers "Env.VIRTUAL_SPT_API")) ( printf "web-sportsbookgateway.%s-novibet.systems" $environment)) }}
{{ $casinogames_service :=trim (or (first (groupByKeys $containers "Env.VIRTUAL_CASINOGAMES_SERVICE")) (printf "services-casinogames.%s-novibet.systems" $environment)) }}
{{ $casinosearch :=trim (or (first (groupByKeys $containers "Env.VIRTUAL_CASINO_SEARCH")) (printf "services-casinogamessearch.%s-novibet.systems" $environment)) }}
{{ $forwarded_host := trim (or (first (groupByKeys $containers "Env.VIRTUAL_FORWARDED_HOST")) (printf $domainTemplate $domainKey)) }}
{{ $forwarded_host_mobile := replace $forwarded_host "www" "m"  -1}}
{{ $spt_search := trim (or (first (groupByKeys $containers "Env.VIRTUAL_SPT_SEARCH")) (printf "services-betcontextsearch.%s-novibet.systems" $environment)) }}
{{ $az_signalr := trim (or (first (groupByKeys $containers "Env.VIRTUAL_AZ_SIGNALR")) ("services-signalrhub.devgr-novibet.systems")) }}
{{ $spt_betslip := trim (or (first (groupByKeys $containers "Env.VIRTUAL_SPT_BETSLIP")) ("web-betslips.devgr-novibet.systems")) }}

{{/* Get the SERVER_TOKENS defined by containers w/ the same vhost, falling back to "" */}}
{{ $server_tokens := trim (or (first (groupByKeys $containers "Env.SERVER_TOKENS")) "") }}

{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) (or $.Env.HTTPS_METHOD "redirect") }}

{{/* Get the SSL_POLICY defined by containers w/ the same vhost, falling back to empty string (use default) */}}
{{ $ssl_policy := or (first (groupByKeys $containers "Env.SSL_POLICY")) "" }}

{{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
{{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) (or $.Env.HSTS "max-age=31536000") }}

{{/* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}
{{ $vhost_root := or (first (groupByKeys $containers "Env.VIRTUAL_ROOT")) "/var/www/public" }}


{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
{{ $vhostCert := trimSuffix ".key" $vhostCert }}

{{/* Use the cert specified on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}


server {
	server_name {{ $host }};
	{{ if $server_tokens }}
	server_tokens {{ $server_tokens }};
	{{ end }}
	listen {{ $external_http_port }} {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:80 {{ $default_server }};
	{{ end }}
	{{ $access_log }}

	{{ if eq $network_tag "internal" }}
	# Only allow traffic from internal clients
	include /etc/nginx/network_internal.conf;
	{{ end }}

	{{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{ else if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{ end }}

	location / {
		{{ if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ else if eq $proto "fastcgi" }}
		root   {{ trim $vhost_root }};
		include fastcgi_params;
		fastcgi_pass {{ trim $upstream_name }};
		{{ else if eq $proto "grpc" }}
		grpc_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ else }}
		add_header  X-Upstream-Environment   {{ $environment }};
		add_header  X-Upstream-IP   {{ $forwarded_for }};
		add_header  X-Upstream-Host   {{ $forwarded_host }};
		add_header  X-Upstream-Default   http://{{ $backend }}/;
		add_header  X-Upstream-Legacy-Desktop   http://{{ $legacy_desktop }}/;
		add_header  X-Upstream-Legacy-Mobile   http://{{ $legacy_mobile }}/;
		add_header  X-Upstream-Spt-Gateway   http://{{ $spt_gateway }}/;
		add_header  X-Upstream-Spt-API   http://{{ $spt_api }}/;
		add_header  X-Upstream-Mrk-Gateway   http://{{ $mrk_gateway }}/;
		add_header  X-Upstream-Casino-Search   http://{{ $casinosearch }}/;
		add_header  X-Upstream-Casino-Games   http://{{ $casinogames_service }}/;
		add_header  X-Upstream-Az-Signalr   http://{{ $az_signalr }}/;

		proxy_set_header X-Forwarded-Host {{ $forwarded_host }};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
		
		proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ end }}
		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
		{{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
		include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
		{{ else if (exists "/etc/nginx/vhost.d/default_location") }}
		include /etc/nginx/vhost.d/default_location;
		{{ end }}
	}

  {{ if eq $hasProxy "true"}}

	location ~* ^\/betsearch/api/search/CT_(.*)_CasinoMobile {
		proxy_pass http://{{ $casinosearch }}/api/search/MOBILE/$1/$is_args$args;
		proxy_set_header Host {{ $casinosearch }};
	}

	location ~* ^\/betsearch/api/search/CT_(.*)_casino {
		proxy_pass http://{{ $casinosearch }}/api/search/MOBILE/$1/$is_args$args;
		proxy_set_header Host {{ $casinosearch }};
	}

	location ~* ^\/betsearch\/(.*) {
		proxy_pass http://{{ $legacy_desktop }};
		proxy_set_header Host {{ $legacy_desktop }};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
	}

	location ~* ^\/(media|dbmedia|pamedia)\/(.*) {
		proxy_pass http://{{ $legacy_desktop }};
		proxy_set_header Host {{ $legacy_desktop }};
	}

	location /mediaimages {
		proxy_pass http://{{ $casinogames_service }};
	}

	location ~* ^\/mrk\/(.*) {
		proxy_pass http://{{ $mrk_gateway }}/mrk/$1/$is_args$args;
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
	}
	
	location ~* ^\/ngapi\/mobile\/(.*) {
		proxy_pass http://{{ $legacy_mobile }}/$1$is_args$args;
		proxy_set_header Host {{ $legacy_mobile }};

		{{ if eq (index $oneDomain $domain) "false" }}
		proxy_set_header X-Forwarded-Host {{ $forwarded_host_mobile }};
		{{else}}
		proxy_set_header X-Forwarded-Host {{ $forwarded_host }};
		{{end}}
		
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
		proxy_set_header NGApi NGApi;
   }

	location ~* ^\/ngapi\/desktop\/(.*) {
		proxy_pass http://{{ $legacy_desktop }}/$1$is_args$args;
		proxy_set_header Host {{ $legacy_desktop }};
		proxy_set_header X-Forwarded-Host {{ $forwarded_host }};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
		proxy_set_header NGApi NGApi;
   }

	location /accountnotificationshub {
	   proxy_pass http://{{ $az_signalr }};
	   proxy_set_header Host {{ $az_signalr }};
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_http_version 1.1;
	}

	location /signalr/desktop {
	   proxy_pass http://{{ $legacy_desktop }};
	   proxy_set_header Host {{ $legacy_desktop }};
	   proxy_set_header X-Forwarded-Host {{ $forwarded_host }};
	   proxy_set_header X-Forwarded-For {{ $forwarded_for }};
	   proxy_set_header X-Real-IP {{ $forwarded_for}};
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_http_version 1.1;
	}

	location /signalr/mobile {
	   proxy_pass http://{{ $legacy_mobile }};
	   proxy_set_header Host {{ $legacy_mobile }};
	   proxy_set_header X-Forwarded-For {{ $forwarded_for }};
	   proxy_set_header X-Real-IP {{ $forwarded_for}};
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_http_version 1.1;
	}

	location ~* ^\/ngapi\/(.*) {
		proxy_pass http://{{ $backend }}/$1$is_args$args;
		proxy_set_header Host {{ $backend }};
		proxy_set_header X-Forwarded-Host {{ $forwarded_host }};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
		proxy_set_header NGApi NGApi;
   }

	location /signalr {
		proxy_pass http://{{ $backend }}/$1$is_args$args;
		proxy_set_header Host {{ $backend }};
		proxy_set_header X-Forwarded-Host www{{$domainKey}}.novibet.{{$domain}};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_http_version 1.1;
	}

	location /spt/feed/signalr {
		proxy_pass http://{{$spt_gateway}};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
		proxy_http_version 1.1;
	}

	location /spt/feed {
		proxy_pass http://{{$spt_gateway}};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
   	}

	location /spt/api {
		proxy_pass http://{{$spt_api}};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
   	}

	location /api/betslip {
		proxy_pass http://{{$spt_betslip}};
		proxy_set_header X-Forwarded-For {{ $forwarded_for }};
		proxy_set_header X-Real-IP {{ $forwarded_for}};
   	}
	
  {{ end }}
}
{{ end }}
